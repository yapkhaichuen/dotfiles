(setq inhibit-startup-message t)

(tool-bar-mode -1)

(toggle-scroll-bar -1)

(show-paren-mode 1)

(setq ido-everywhere t)
(ido-mode t)

(add-hook 'prog-mode-hook 'display-line-numbers-mode)

(setq-default initial-scratch-message nil)

(defalias 'yes-or-no-p 'y-or-n-p)

(setq user-full-name "Yap Khai Chuen"
      user-real-login-name "Yap Khai Chuen"
      user-login-name "Khai Chuen"
      user-mail-address "khaichuen06@gmail.com")

(use-package doom-themes
  :ensure t
  :config
  (load-theme 'doom-vibrant))

(use-package doom-modeline
  :ensure t
  :hook (after-init . doom-modeline-mode))

(display-time-mode t)

(use-package all-the-icons
  :ensure t)

(defun code-compile ()
    (interactive)
    (unless (file-exists-p "Makefile")
        (set (make-local-variable 'compile-command)
	(let ((file (file-name-nondirectory buffer-file-name)))
	    (format "%s -o %s %s"
   	        (if  (equal (file-name-extension file) "cpp") "g++" "gcc" )
		(file-name-sans-extension file)
		file)))
     (compile compile-command)))
     (global-set-key [f9] 'code-compile)

(use-package which-key
  :ensure t
  :config (which-key-mode))

(use-package projectile
  :ensure t
  :config
  (define-key projectile-mode-map (kbd "C-x p") 'projectile-command-map)
  (projectile-mode +1))

(use-package dashboard
  :ensure t
  :init
  (progn
  (setq dashboard-items '((recents . 3)
                         (projects . 3)))
  (setq dashboard-startup-banner 'logo)
  (setq dashboard-set-file-icons t)
  (setq dashboard-set-heading-icons t)
)
:config
(dashboard-setup-startup-hook))

(use-package treemacs
  :ensure t
  :bind
  (:map global-map
     ([f8] . treemacs)
     ("C-<f8>". treemacs-select-wwindow))
:config
(progn
(setq treemacs-is-never-other-window t))
)

(require 'treemacs-all-the-icons)
(treemacs-load-theme "all-the-icons")

(use-package treemacs-projectile
  :after treemacs projectile
  :ensure t)

(use-package yasnippet
  :ensure t)

(use-package auto-complete
  :ensure t
  :init
  (progn
  (ac-config-default)
  (global-auto-complete-mode t)
  ))

(use-package flycheck
  :ensure t
  :init
  (global-flycheck-mode t)
  )

(use-package magit
  :ensure t
  :init
  (progn
  (bind-key "C-x g" 'magit-status)))

(use-package modern-cpp-font-lock
  :ensure t)

(use-package centaur-tabs
  :ensure t
  :config
    (setq centaur-tabs-set-bar 'over
          centaur-tabs-set-icons t
	  centaur-tabs-gray-out-icons 'buffer
	  centaur-tabs-height 24
	  centaur-tabs-set-modified-marker t
	  centaur-tabs-modifier-marker "*")
     (centaur-tabs-mode t))
